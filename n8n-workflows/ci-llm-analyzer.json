{
  "name": "CI LLM Analyzer",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "llm-analyze",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "d7e3c8f1-5b2a-4e9d-8c7f-1a2b3c4d5e6f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ci-llm-analyzer"
    },
    {
      "parameters": {
        "jsCode": "// 요청 데이터 정리 및 검증\nconst inputData = $input.first().json;\n\nreturn {\n  json: {\n    ci_log: inputData.ci_log || \"\",\n    symptoms: inputData.symptoms || [],\n    error_type: inputData.error_type || \"unknown\",\n    context: inputData.context || \"\",\n    repository: inputData.repository || \"\"\n  }\n};"
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "전처리",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.PRIVATE_LLM_URL }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"{{ $env.PRIVATE_LLM_MODEL || 'llama-3-70b' }}\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"당신은 자동차 소프트웨어 CI/CD 오류 분석 전문가입니다. Tasking, NXP, Polyspace, Simulink, AUTOSAR, CAN 등의 도구에서 발생하는 오류를 분석하고 해결책을 제시하세요. 한국어로 답변하세요.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"CI 로그:\\n{{ $json.ci_log }}\\n\\n증상:\\n{{ $json.symptoms.join('\\\\n') }}\\n\\n오류 타입: {{ $json.error_type }}\\n\\n컨텍스트: {{ $json.context }}\"\n    }\n  ],\n  \"temperature\": 0.2,\n  \"max_tokens\": 1000\n}",
        "options": {
          "timeout": 25000
        }
      },
      "id": "b2c3d4e5-f6a7-8901-bcde-f12345678901",
      "name": "Private LLM 호출",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// LLM 응답 처리\nconst llmResponse = $input.first().json;\nconst analysis = llmResponse.choices?.[0]?.message?.content || \"분석 결과를 가져올 수 없습니다.\";\nconst inputData = $('전처리').first().json;\n\n// 고급 신뢰도 계산 함수\nfunction calculateAdvancedConfidence(analysis, inputData) {\n  let confidence = 0.0;\n  const analysisLower = analysis.toLowerCase();\n  \n  // 1. 답변 품질 평가 (40%)\n  let qualityScore = 0.0;\n  \n  // 구체적인 해결책 제시 여부\n  const solutionIndicators = [\n    '다음과 같이', '다음 단계', '해결 방법', '조치 방법', '수정 방법',\n    '1.', '2.', '3.', '단계', '절차', '명령어', '설정', '설치'\n  ];\n  const hasSolution = solutionIndicators.some(indicator => \n    analysisLower.includes(indicator)\n  );\n  if (hasSolution) qualityScore += 0.3;\n  \n  // 단계별 가이드 제공 여부\n  const stepIndicators = ['먼저', '그 다음', '마지막으로', '단계별', '순서대로'];\n  const hasSteps = stepIndicators.some(indicator => \n    analysisLower.includes(indicator)\n  );\n  if (hasSteps) qualityScore += 0.2;\n  \n  // 명확한 원인 분석 여부\n  const causeIndicators = [\n    '원인은', '문제는', '이유는', '발생한 이유', '오류의 원인',\n    '설정 문제', '버전 충돌', '의존성', '권한', '경로'\n  ];\n  const hasCause = causeIndicators.some(indicator => \n    analysisLower.includes(indicator)\n  );\n  if (hasCause) qualityScore += 0.2;\n  \n  // 예외 상황 고려 여부\n  const exceptionIndicators = [\n    '만약', '경우에 따라', '주의사항', '주의해야 할', '예외적으로',\n    '다른 방법', '대안', '대체'\n  ];\n  const hasExceptions = exceptionIndicators.some(indicator => \n    analysisLower.includes(indicator)\n  );\n  if (hasExceptions) qualityScore += 0.15;\n  \n  // 추가 리소스 제안 여부\n  const resourceIndicators = [\n    '참고', '문서', '링크', '자료', '가이드', '매뉴얼', '공식 문서'\n  ];\n  const hasResources = resourceIndicators.some(indicator => \n    analysisLower.includes(indicator)\n  );\n  if (hasResources) qualityScore += 0.15;\n  \n  confidence += qualityScore * 0.4;\n  \n  // 2. 도메인 전문성 평가 (25%)\n  let domainScore = 0.0;\n  \n  // 자동차 SW 관련 키워드\n  const automotiveKeywords = [\n    'tasking', 'nxp', 'polyspace', 'simulink', 'autosar', 'can',\n    'ecu', 'mcu', 'embedded', 'real-time', 'os', 'rtos',\n    'compiler', 'linker', 'debugger', 'trace', 'profiling',\n    'memory', 'flash', 'ram', 'stack', 'heap', 'interrupt'\n  ];\n  const automotiveMatches = automotiveKeywords.filter(keyword => \n    analysisLower.includes(keyword)\n  ).length;\n  domainScore += Math.min(automotiveMatches / 5, 1.0) * 0.4;\n  \n  // CI/CD 도구별 특화 키워드\n  const cicdKeywords = [\n    'jenkins', 'gitlab', 'github', 'pipeline', 'build', 'deploy',\n    'docker', 'kubernetes', 'helm', 'yaml', 'json', 'config',\n    'environment', 'variable', 'secret', 'credential'\n  ];\n  const cicdMatches = cicdKeywords.filter(keyword => \n    analysisLower.includes(keyword)\n  ).length;\n  domainScore += Math.min(cicdMatches / 3, 1.0) * 0.3;\n  \n  // 기술적 정확성 키워드\n  const technicalKeywords = [\n    'api', 'sdk', 'library', 'dependency', 'package', 'module',\n    'interface', 'protocol', 'standard', 'specification', 'compliance'\n  ];\n  const technicalMatches = technicalKeywords.filter(keyword => \n    analysisLower.includes(keyword)\n  ).length;\n  domainScore += Math.min(technicalMatches / 3, 1.0) * 0.3;\n  \n  confidence += domainScore * 0.25;\n  \n  // 3. 답변 완성도 평가 (20%)\n  let completenessScore = 0.0;\n  \n  // 답변 길이와 상세함\n  if (analysis.length > 500) {\n    completenessScore += 0.4;\n  } else if (analysis.length > 300) {\n    completenessScore += 0.3;\n  } else if (analysis.length > 150) {\n    completenessScore += 0.2;\n  } else if (analysis.length > 50) {\n    completenessScore += 0.1;\n  }\n  \n  // 문단 구조 (여러 문단으로 구성)\n  const paragraphCount = analysis.split('\\n\\n').length;\n  if (paragraphCount >= 3) {\n    completenessScore += 0.3;\n  } else if (paragraphCount >= 2) {\n    completenessScore += 0.2;\n  } else if (paragraphCount >= 1) {\n    completenessScore += 0.1;\n  }\n  \n  // 구체적인 수치나 버전 정보\n  const hasNumbers = /\\d+(\\.\\d+)?/.test(analysis);\n  if (hasNumbers) completenessScore += 0.15;\n  \n  // 코드 예제나 명령어\n  const hasCode = /`[^`]+`|```|\\$\\s|sudo|npm|pip|git|make|cmake/.test(analysis);\n  if (hasCode) completenessScore += 0.15;\n  \n  confidence += completenessScore * 0.2;\n  \n  // 4. 컨텍스트 적합성 평가 (15%)\n  let contextScore = 0.0;\n  \n  // 입력된 오류 타입과의 일치도\n  const errorType = inputData.error_type?.toLowerCase() || '';\n  if (errorType && analysisLower.includes(errorType)) {\n    contextScore += 0.3;\n  }\n  \n  // 증상과 해결책의 연관성\n  const symptoms = inputData.symptoms || [];\n  const symptomMatches = symptoms.filter(symptom => \n    analysisLower.includes(symptom.toLowerCase())\n  ).length;\n  if (symptoms.length > 0) {\n    contextScore += (symptomMatches / symptoms.length) * 0.4;\n  }\n  \n  // 저장소 특성 반영\n  const repository = inputData.repository?.toLowerCase() || '';\n  if (repository && analysisLower.includes(repository)) {\n    contextScore += 0.15;\n  }\n  \n  // CI 로그 내용과의 연관성\n  const ciLog = inputData.ci_log?.toLowerCase() || '';\n  const logKeywords = ciLog.split(/\\s+/).filter(word => word.length > 3);\n  const logMatches = logKeywords.filter(keyword => \n    analysisLower.includes(keyword)\n  ).length;\n  if (logKeywords.length > 0) {\n    contextScore += Math.min(logMatches / Math.min(logKeywords.length, 10), 1.0) * 0.15;\n  }\n  \n  confidence += contextScore * 0.15;\n  \n  // 최종 신뢰도 정규화 (0.0 ~ 1.0)\n  return Math.min(Math.max(confidence, 0.0), 1.0);\n}\n\n// 신뢰도 계산\nconst confidence = calculateAdvancedConfidence(analysis, inputData);\n\n// 신뢰도 등급 결정\nlet confidenceLevel = '낮음';\nif (confidence >= 0.8) {\n  confidenceLevel = '매우 높음';\n} else if (confidence >= 0.7) {\n  confidenceLevel = '높음';\n} else if (confidence >= 0.5) {\n  confidenceLevel = '보통';\n} else if (confidence >= 0.3) {\n  confidenceLevel = '낮음';\n} else {\n  confidenceLevel = '매우 낮음';\n}\n\nreturn {\n  json: {\n    analysis: analysis,\n    confidence: Math.round(confidence * 100) / 100,\n    confidence_level: confidenceLevel,\n    analysis_length: analysis.length,\n    word_count: analysis.split(/\\s+/).length\n  }\n};"
      },
      "id": "c3d4e5f6-a7b8-9012-cdef-123456789012",
      "name": "후처리",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "d4e5f6a7-b8c9-0123-def1-234567890123",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "전처리",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "전처리": {
      "main": [
        [
          {
            "node": "Private LLM 호출",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Private LLM 호출": {
      "main": [
        [
          {
            "node": "후처리",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "후처리": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "ci-llm-analyzer",
  "meta": {
    "instanceId": "your-instance-id"
  },
  "tags": []
}
